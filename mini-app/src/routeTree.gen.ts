/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as LoginImport } from './routes/login'
import { Route as ErrorImport } from './routes/error'
import { Route as AddImport } from './routes/add'
import { Route as IndexImport } from './routes/index'
import { Route as LiveIdImport } from './routes/live/$id'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRoute = NotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const AddRoute = AddImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LiveIdRoute = LiveIdImport.update({
  id: '/live/$id',
  path: '/live/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/add': {
      id: '/add'
      path: '/add'
      fullPath: '/add'
      preLoaderRoute: typeof AddImport
      parentRoute: typeof rootRoute
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/live/$id': {
      id: '/live/$id'
      path: '/live/$id'
      fullPath: '/live/$id'
      preLoaderRoute: typeof LiveIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add': typeof AddRoute
  '/error': typeof ErrorRoute
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/profile': typeof ProfileRoute
  '/live/$id': typeof LiveIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add': typeof AddRoute
  '/error': typeof ErrorRoute
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/profile': typeof ProfileRoute
  '/live/$id': typeof LiveIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/add': typeof AddRoute
  '/error': typeof ErrorRoute
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/profile': typeof ProfileRoute
  '/live/$id': typeof LiveIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add'
    | '/error'
    | '/login'
    | '/not-found'
    | '/profile'
    | '/live/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add'
    | '/error'
    | '/login'
    | '/not-found'
    | '/profile'
    | '/live/$id'
  id:
    | '__root__'
    | '/'
    | '/add'
    | '/error'
    | '/login'
    | '/not-found'
    | '/profile'
    | '/live/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddRoute: typeof AddRoute
  ErrorRoute: typeof ErrorRoute
  LoginRoute: typeof LoginRoute
  NotFoundRoute: typeof NotFoundRoute
  ProfileRoute: typeof ProfileRoute
  LiveIdRoute: typeof LiveIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddRoute: AddRoute,
  ErrorRoute: ErrorRoute,
  LoginRoute: LoginRoute,
  NotFoundRoute: NotFoundRoute,
  ProfileRoute: ProfileRoute,
  LiveIdRoute: LiveIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add",
        "/error",
        "/login",
        "/not-found",
        "/profile",
        "/live/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/add": {
      "filePath": "add.tsx"
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/live/$id": {
      "filePath": "live/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
